---
- name: Crear credenciales en Jenkins usando Jenkins CLI sin XML
  hosts: jenkins_vm
  become: yes
  gather_facts: no

  vars:
    jenkins_url: http://localhost:8080
    jenkins_admin_user: admin
    jenkins_admin_password: admin_password
    jenkins_cli_jar: /tmp/jenkins-cli.jar

  tasks:
    - name: Instalar OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present
        update_cache: yes

    ##################################################################
    # Esperar a que Jenkins esté disponible
    ##################################################################
    - name: Esperar a que Jenkins esté disponible
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10

    ##################################################################
    # Descargar Jenkins CLI
    ##################################################################
    - name: Descargar jenkins-cli.jar
      get_url:
        url: "{{ jenkins_url }}/jnlpJars/jenkins-cli.jar"
        dest: "{{ jenkins_cli_jar }}"

    ##################################################################
    # Verificar credenciales existentes
    ##################################################################
    - name: Verificar credenciales existentes
      shell: >
        java -jar {{ jenkins_cli_jar }} -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        list-credentials system::system::jenkins
      register: existing_credentials
      args:
        executable: /bin/bash
      ignore_errors: yes

    ##################################################################
    # Crear credencial Docker Hub usando Jenkins CLI
    ##################################################################
    - name: Crear credencial Docker Hub usando Jenkins CLI
      shell: >
        java -jar {{ jenkins_cli_jar }} -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        add-credentials system::system::jenkins
        --username=dylalva
        --password={{ lookup('env', 'DOCKER_PASSWORD') }}
        --id=dockerhub-cred
        --description="Docker Hub Credentials"
        --scope="GLOBAL"
      args:
        executable: /bin/bash
      when: "'dockerhub-cred' not in existing_credentials.stdout"
      register: dockerhub_result
      ignore_errors: yes

    ##################################################################
    # Crear credencial Azure Service Principal usando Jenkins CLI
    ##################################################################
    - name: Crear credencial Azure SP usando Jenkins CLI
      shell: >
        java -jar {{ jenkins_cli_jar }} -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        add-credentials system::system::jenkins
        --username={{ lookup('env', 'AZURE_CLIENT_ID') }}
        --password={{ lookup('env', 'AZURE_CLIENT_SECRET') }}
        --id=azure-service-principal
        --description="Azure Service Principal"
        --scope="GLOBAL"
        --tenant={{ lookup('env', 'AZURE_TENANT_ID') }}
        --subscription-id={{ lookup('env', 'AZURE_SUBSCRIPTION_ID') }}
      args:
        executable: /bin/bash
      when: "'azure-service-principal' not in existing_credentials.stdout"
      register: azure_result
      ignore_errors: yes

    ##################################################################
    # Verificar que las credenciales se crearon correctamente
    ##################################################################
    - name: Verificar credenciales creadas
      shell: >
        java -jar {{ jenkins_cli_jar }} -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        list-credentials system::system::jenkins
      register: final_credentials
      args:
        executable: /bin/bash

    - name: Mostrar credenciales existentes
      debug:
        msg: "Credenciales disponibles: {{ final_credentials.stdout_lines }}"

    ##################################################################
    # Mensaje final de éxito
    ##################################################################
    - name: Credenciales Docker Hub y Azure creadas con éxito 🎉
      debug:
        msg: "✅ Credenciales Docker Hub y Azure Service Principal creadas con éxito."

    - name: Mostrar resultados de creación
      debug:
        msg: |
          Resultado Docker Hub: {{ dockerhub_result.stdout | default('No ejecutado') }}
          Resultado Azure: {{ azure_result.stdout | default('No ejecutado') }}