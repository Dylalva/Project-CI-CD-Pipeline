- name: Levantar y preparar Jenkins en VM Azure
  hosts: jenkins_vm
  become: true

  vars:
    docker_jenkins_home: jenkins_home
    jenkins_container_name: jenkins

  tasks:
    - name: Actualizar repositorios APT en la VM
      apt:
        update_cache: yes

    ##################################################################
    # Desinstalar containerd si está presente, para evitar conflicto
    ##################################################################
    - name: Remover containerd (evitar conflicto con containerd.io)
      apt:
        name: containerd
        state: absent
        purge: yes

    ##################################################################
    # 1) Instalar Docker y utilidades en la VM
    ##################################################################
    - name: Instalar Docker, curl, wget y git en la VM
      apt:
        name:
          - docker.io
          - curl
          - wget
          - git
        state: present

    - name: Asegurar que Docker esté iniciado y habilitado en la VM
      service:
        name: docker
        state: started
        enabled: yes

    ##################################################################
    # 2) Crear volumen Docker para jenkins_home (si no existía)
    ##################################################################
    - name: Crear volumen Docker 'jenkins_home'
      command: docker volume create {{ docker_jenkins_home }}
      register: volume_created
      changed_when: "'{{ docker_jenkins_home }}' in volume_created.stdout"

    ##################################################################
    # 3) Descargar imagen oficial de Jenkins LTS en la VM
    ##################################################################
    - name: Descargar imagen Jenkins LTS
      docker_image:
        name: jenkins/jenkins
        tag: lts
        source: pull

    ##################################################################
    # 4) Levantar contenedor Jenkins (sin configuración de seguridad)
    ##################################################################
    - name: Iniciar contenedor Jenkins
      docker_container:
        name: "{{ jenkins_container_name }}"
        image: jenkins/jenkins:lts
        state: started
        recreate: yes
        restart_policy: unless-stopped
        ports:
          - "8080:8080"
          - "50000:50000"
        volumes:
          - "{{ docker_jenkins_home }}:/var/jenkins_home"
          - "/var/run/docker.sock:/var/run/docker.sock"

    ##################################################################
    # 5) Instalar dentro del contenedor:
    #    - curl
    #    - kubectl
    #    - Azure CLI
    #    - Docker
    ##################################################################

    - name: Instalar curl dentro del contenedor Jenkins (necesario para bajar kubectl)
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c "
          apt-get update && apt-get install -y curl
        "
      args:
        executable: /bin/bash

    - name: Instalar kubectl dentro del contenedor Jenkins
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c "
          curl -LO https://dl.k8s.io/release/\$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl && \
          chmod +x kubectl && \
          mv kubectl /usr/local/bin/
        "
      args:
        executable: /bin/bash

    - name: Instalar Azure CLI dentro del contenedor Jenkins
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c "
          curl -sL https://aka.ms/InstallAzureCLIDeb | bash
        "
      args:
        executable: /bin/bash

    - name: Instalar Docker dentro del contenedor Jenkins
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c "
          apt-get update && apt-get install -y docker.io
        "
      args:
        executable: /bin/bash

    ##################################################################
    # 6) Esperar a que Jenkins fini​onice (cree init.groovy.d)
    ##################################################################
    - name: Esperar a que Jenkins inicialice (puerto 8080 abierto)
      wait_for:
        port: 8080
        delay: 10
        timeout: 120

    ##################################################################
    # 7) Copiar el Groovy de seguridad dentro del contenedor
    ##################################################################
    - name: Copiar basic-security.groovy dentro del contenedor Jenkins
      command: >
        docker cp basic-security.groovy {{ jenkins_container_name }}:/var/jenkins_home/init.groovy.d/basic-security.groovy
      args:
        chdir: "{{ playbook_dir }}"     # para que busque basic-security.groovy junto a este playbook

    ##################################################################
    # 8) Reiniciar Jenkins para que ejecute el script Groovy
    ##################################################################
    - name: Reiniciar contenedor Jenkins para aplicar Groovy de seguridad
      docker_container:
        name: "{{ jenkins_container_name }}"
        state: restarted

    ##################################################################
    # 9) Verificar que el contenedor siga corriendo
    ##################################################################
    - name: Verificar que contenedor Jenkins esté corriendo
      shell: docker ps -f name={{ jenkins_container_name }} --format "{{ '{{' }}.Names{{ '}}' }}"
      register: jenkins_container
      failed_when: "'{{ jenkins_container_name }}' not in jenkins_container.stdout"
      changed_when: false

    - name: Jenkins arrancó con Groovy de seguridad ✔
      debug:
        msg: "✅ Jenkins se reinició, se instaló curl, kubectl, az cli y docker en el contenedor, y se aplicó basic-security.groovy."
