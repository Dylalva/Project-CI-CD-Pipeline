---
- name: Configurar Jenkins en VM Azure
  hosts: jenkins_vm
  become: true

  vars:
    docker_jenkins_home: jenkins_home
    jenkins_container_name: jenkins
    host_jenkins_data_dir: "/var/lib/docker/volumes/{{ docker_jenkins_home }}/_data"
  tasks:
    - name: Actualizar repositorios APT en la VM
      apt:
        update_cache: yes

    - name: Instalar Docker
      apt:
        name: docker.io
        state: present

    - name: Asegurar que Docker esté iniciado y habilitado
      service:
        name: docker
        state: started
        enabled: yes

    - name: Descargar imagen Jenkins LTS
      docker_image:
        name: jenkins/jenkins
        tag: lts
        source: pull

    - name: Ejecutar contenedor Jenkins
      docker_container:
        name: "{{ jenkins_container_name }}"
        image: jenkins/jenkins:lts
        state: started
        recreate: yes
        restart_policy: unless-stopped
        ports:
          - "8080:8080"
          - "50000:50000"
        volumes:
          - "{{ docker_jenkins_home }}:/var/jenkins_home"
          - "/var/run/docker.sock:/var/run/docker.sock"

    - name: Esperar a que Jenkins inicialice (puerto 8080)
      wait_for:
        port: 8080
        delay: 10
        timeout: 120

    - name: Instalar curl dentro del contenedor Jenkins
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c "
          apt-get update && apt-get install -y curl
        "
      args:
        executable: /bin/bash

    - name: Instalar kubectl dentro del contenedor Jenkins
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c '
          set -e
          VERSION=$(curl -sL https://dl.k8s.io/release/stable.txt)
          curl -LO https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv kubectl /usr/local/bin/
        '
      args:
        executable: /bin/bash

    - name: Instalar Azure CLI dentro del contenedor Jenkins
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c "
          curl -sL https://aka.ms/InstallAzureCLIDeb | bash
        "
      args:
        executable: /bin/bash

    - name: Instalar Docker dentro del contenedor Jenkins
      shell: |
        docker exec -u 0 {{ jenkins_container_name }} bash -c "
          apt-get update && apt-get install -y docker.io
        "
      args:
        executable: /bin/bash

    - name: Crear carpeta init.groovy.d en el volumen de Jenkins (host)
      file:
        path: "{{ host_jenkins_data_dir }}/init.groovy.d"
        state: directory
        mode: "0755"

    - name: Crear directamente el archivo basic-security.groovy en el host
      copy:
        content: |
          import jenkins.model.*
          import hudson.security.*

          def instance = Jenkins.getInstance()

          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount("admin", "admin_password")
          instance.setSecurityRealm(hudsonRealm)

          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)

          instance.save()
        dest: "{{ host_jenkins_data_dir }}/init.groovy.d/basic-security.groovy"
        mode: "0644"


    - name: Reiniciar contenedor Jenkins para que ejecute el Groovy de seguridad
      docker_container:
        name: "{{ jenkins_container_name }}"
        state: restarted

    - name: Verificar que contenedor Jenkins esté corriendo
      shell: docker ps -f name={{ jenkins_container_name }} --format "{{ '{{' }}.Names{{ '}}' }}"
      register: jenkins_container
      failed_when: "'{{ jenkins_container_name }}' not in jenkins_container.stdout"
      changed_when: false

    - name: Mostrar mensaje de éxito
      debug:
        msg: "✅ Jenkins configurado y corriendo en la VM, con Groovy de seguridad aplicado."