---
- name: Instalar plugins, credenciales y pipeline en Jenkins
  hosts: jenkins_vm
  become: yes

  vars:
    jenkins_url: http://localhost:8080
    jenkins_admin_user: admin
    jenkins_admin_password: admin_password
    job_name: ci-cd-kube
    jenkins_plugins:
      - docker-plugin
      - docker-workflow
      - azure-credentials
      - azure-cli

    job_xml_content: |
      <?xml version='1.1' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.42">
        <description>Pipeline para CI/CD desde GitHub</description>
        <keepDependencies>false</keepDependencies>
        <properties/>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.93">
          <scm class="hudson.plugins.git.GitSCM" plugin="git@4.13.4">
            <configVersion>2</configVersion>
            <userRemoteConfigs>
              <hudson.plugins.git.UserRemoteConfig>
                <url>https://github.com/Dylalva/Project-CI-CD-Pipeline.git</url>
              </hudson.plugins.git.UserRemoteConfig>
            </userRemoteConfigs>
            <branches>
              <hudson.plugins.git.BranchSpec>
                <name>*/master</name>
              </hudson.plugins.git.BranchSpec>
            </branches>
            <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
            <submoduleCfg class="list"/>
            <extensions/>
          </scm>
          <scriptPath>Jenkinsfile</scriptPath>
          <lightweight>true</lightweight>
        </definition>
        <triggers>
          <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.3">
            <spec></spec>
          </com.cloudbees.jenkins.GitHubPushTrigger>
        </triggers>
      
        <disabled>false</disabled>
      </flow-definition>


  tasks:
    - name: Instalar OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present
        update_cache: yes

    - name: Esperar a que Jenkins esté disponible (puerto 8080)
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10

    - name: Descargar jenkins-cli.jar
      get_url:
        url: "{{ jenkins_url }}/jnlpJars/jenkins-cli.jar"
        dest: /tmp/jenkins-cli.jar

    - name: Instalar plugins de Jenkins
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        install-plugin {{ item }} -deploy
      loop: "{{ jenkins_plugins }}"
      args:
        executable: /bin/bash

    - name: Reiniciar Jenkins tras plugins
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        safe-restart
      args:
        executable: /bin/bash

    - name: Esperar a que Jenkins esté disponible tras reinicio
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result_restart
      until: result_restart.status == 200
      retries: 30
      delay: 15

    - name: Crear archivo temporal con XML del job
      copy:
        content: "{{ job_xml_content }}"
        dest: /tmp/job-config.xml
        mode: '0644'

    - name: Verificar si el job ya existe
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        list-jobs
      register: existing_jobs
      args:
        executable: /bin/bash

    - name: Crear job usando Jenkins CLI
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        create-job {{ job_name }} < /tmp/job-config.xml
      when: job_name not in existing_jobs.stdout
      args:
        executable: /bin/bash

    - name: Actualizar job si ya existe
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        update-job {{ job_name }} < /tmp/job-config.xml
      when: job_name in existing_jobs.stdout
      args:
        executable: /bin/bash

    - name: Limpiar archivos temporales
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/jenkins-cli.jar
        - /tmp/job-config.xml

    - name: Jenkins configurado con plugins y el job '{{ job_name }}' creado 🎉
      debug:
        msg: "✅ Jenkins ya tiene plugins, credenciales y el job '{{ job_name }}' creado."