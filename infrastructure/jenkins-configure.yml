---
- name: Instalar plugins, credenciales y pipeline en Jenkins
  hosts: jenkins_vm
  become: true

  vars:
    # URL localhost dentro de la VM (Jenkins escucha en el contenedor, puerto 8080 expuesto al host)
    jenkins_url: http://localhost:8080

    # Credenciales estÃ¡ticas (el Groovy del primer playbook ya creÃ³ user 'admin' con esta password)
    jenkins_admin_user: admin
    jenkins_admin_password: admin_password

    # Nombre del job/pipeline
    job_name: ci-cd-kube

    # Lista de plugins que queremos instalar
    jenkins_plugins:
      - docker-plugin
      - docker-workflow
      - azure-credentials
      - azure-cli

  tasks:
    - name: Instalar OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present
        update_cache: yes
    ##################################################################
    # 1) Esperar a que Jenkins estÃ© UP y responda en /login
    ##################################################################
    - name: Esperar a que Jenkins estÃ© disponible (puerto 8080)
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10

    ##################################################################
    # 2) Descargar Jenkins CLI
    ##################################################################
    - name: Descargar jenkins-cli.jar
      get_url:
        url: "{{ jenkins_url }}/jnlpJars/jenkins-cli.jar"
        dest: /tmp/jenkins-cli.jar

    ##################################################################
    # 3) Instalar plugins necesarios
    ##################################################################
    - name: Instalar plugins de Jenkins
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        install-plugin {{ item }} -deploy
      loop: "{{ jenkins_plugins }}"
      args:
        executable: /bin/bash

    ##################################################################
    # 4) Esperar de nuevo tras instalar plugins
    ##################################################################
    - name: Esperar a que Jenkins estÃ© disponible tras plugins
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result_plugins
      until: result_plugins.status == 200
      retries: 20
      delay: 10

    ##################################################################
    # 8) Crear el pipeline desde job-config.xml
    ##################################################################
    - name: Crear pipeline '{{ job_name }}' desde XML
      uri:
        url: "{{ jenkins_url }}/createItem?name={{ job_name }}"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: "application/xml"
          "{{ crumb.content.split(':')[0] }}": "{{ crumb.content.split(':')[1] }}"
        body: "{{ lookup('file', 'infrastructure/job-config.xml') }}"

    ##################################################################
    # 5) Obtener CSRF crumb para llamadas seguras a la API
    ##################################################################
    - name: Obtener CSRF crumb (API token)
      uri:
        url: "{{ jenkins_url }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)"
        method: GET
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        return_content: yes
      register: crumb

    ##################################################################
    # 6) Crear credencial Docker Hub
    ##################################################################
    - name: Crear credencial Docker Hub en Jenkins
      uri:
        url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: "application/json"
          "{{ crumb.content.split(':')[0] }}": "{{ crumb.content.split(':')[1] }}"
        body_format: json
        body: >
          {
            "credentials": {
              "scope": "GLOBAL",
              "id": "dockerhub-cred",
              "username": "dylalva",
              "password": "{{ lookup('env', 'DOCKER_PASSWORD') }}",
              "description": "Docker Hub Credentials",
              "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
            }
          }

    ##################################################################
    # 7) Crear credencial Azure Service Principal
    ##################################################################
    - name: Crear credencial Azure SP en Jenkins
      uri:
        url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: "application/json"
          "{{ crumb.content.split(':')[0] }}": "{{ crumb.content.split(':')[1] }}"
        body_format: json
        body: >
          {
            "credentials": {
              "scope": "GLOBAL",
              "id": "azure-service-principal",
              "subscriptionId": "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID') }}",
              "clientId": "{{ lookup('env', 'AZURE_CLIENT_ID') }}",
              "clientSecret": "{{ lookup('env', 'AZURE_CLIENT_SECRET') }}",
              "tenant": "{{ lookup('env', 'AZURE_TENANT_ID') }}",
              "description": "Azure Service Principal",
              "$class": "com.microsoft.azure.credentials.AzureServicePrincipal"
            }
          }

    ##################################################################
    # 9) Mensaje final de Ã©xito
    ##################################################################
    - name: Jenkins configurado con plugins, credenciales y pipeline ðŸŽ‰
      debug:
        msg: "âœ… Jenkins ya tiene plugins, credenciales y el job '{{ job_name }}' creado."
