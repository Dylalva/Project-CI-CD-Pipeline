---
- name: Instalar plugins, credenciales y pipeline en Jenkins
  hosts: jenkins_vm
  become: yes

  vars:
    # URL localhost dentro de la VM (Jenkins escucha en el contenedor, puerto 8080 expuesto al host)
    jenkins_url: http://localhost:8080

    # Credenciales estÃ¡ticas (el Groovy del primer playbook ya creÃ³ user 'admin' con esta password)
    jenkins_admin_user: admin
    jenkins_admin_password: admin_password

    # Nombre del job/pipeline
    job_name: ci-cd-kube

    # Lista de plugins que queremos instalar
    jenkins_plugins:
      - docker-plugin
      - docker-workflow
      - azure-credentials
      - azure-cli

    # Contenido XML del job como variable separada
    job_xml_content: |
      <?xml version='1.1' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.42">
        <description>Pipeline para CI/CD desde GitHub</description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <hudson.triggers.SCMTrigger>
            <spec>@hourly</spec>
            <ignorePostCommitHooks>false</ignorePostCommitHooks>
          </hudson.triggers.SCMTrigger>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.93">
          <scm class="hudson.plugins.git.GitSCM" plugin="git@4.13.4">
            <configVersion>2</configVersion>
            <userRemoteConfigs>
              <hudson.plugins.git.UserRemoteConfig>
                <url>https://github.com/Dylalva/Project-CI-CD-Pipeline.git</url>
              </hudson.plugins.git.UserRemoteConfig>
            </userRemoteConfigs>
            <branches>
              <hudson.plugins.git.BranchSpec>
                <name>*/master</name>
              </hudson.plugins.git.BranchSpec>
            </branches>
            <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
            <submoduleCfg class="list"/>
            <extensions/>
          </scm>
          <scriptPath>Jenkinsfile</scriptPath>
          <lightweight>true</lightweight>
        </definition>
        <triggers/>
        <disabled>false</disabled>
      </flow-definition>

  tasks:
    - name: Instalar OpenJDK 17
      apt:
        name: openjdk-17-jdk
        state: present
        update_cache: yes

    ##################################################################
    # 1) Esperar a que Jenkins estÃ© UP y responda en /login
    ##################################################################
    - name: Esperar a que Jenkins estÃ© disponible (puerto 8080)
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10

    ##################################################################
    # 2) Descargar Jenkins CLI
    ##################################################################
    - name: Descargar jenkins-cli.jar
      get_url:
        url: "{{ jenkins_url }}/jnlpJars/jenkins-cli.jar"
        dest: /tmp/jenkins-cli.jar

    ##################################################################
    # 3) Instalar plugins necesarios
    ##################################################################
    - name: Instalar plugins de Jenkins
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        install-plugin {{ item }} -deploy
      loop: "{{ jenkins_plugins }}"
      args:
        executable: /bin/bash

    ##################################################################
    # 4) Reiniciar Jenkins tras instalar plugins
    ##################################################################
    - name: Reiniciar Jenkins tras plugins
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        safe-restart
      args:
        executable: /bin/bash

    ##################################################################
    # 5) Esperar a que Jenkins estÃ© disponible tras reinicio
    ##################################################################
    - name: Esperar a que Jenkins estÃ© disponible tras reinicio
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result_restart
      until: result_restart.status == 200
      retries: 30
      delay: 15

    ##################################################################
    # 6) Crear archivo temporal con el XML del job
    ##################################################################
    - name: Crear archivo temporal con XML del job
      copy:
        content: "{{ job_xml_content }}"
        dest: /tmp/job-config.xml
        mode: '0644'

    ##################################################################
    # 7) Verificar si el job ya existe
    ##################################################################
    - name: Verificar si el job ya existe
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        list-jobs
      register: existing_jobs
      args:
        executable: /bin/bash

    ##################################################################
    # 8) Crear job usando Jenkins CLI
    ##################################################################
    - name: Crear job usando Jenkins CLI
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        create-job {{ job_name }} < /tmp/job-config.xml
      when: job_name not in existing_jobs.stdout
      args:
        executable: /bin/bash

    ##################################################################
    # 9) Actualizar job si ya existe
    ##################################################################
    - name: Actualizar job si ya existe
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        update-job {{ job_name }} < /tmp/job-config.xml
      when: job_name in existing_jobs.stdout
      args:
        executable: /bin/bash

    ##################################################################
    # 10) Crear credencial Docker Hub
    ##################################################################
    - name: Crear credencial Docker Hub en Jenkins
      uri:
        url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: "application/json"
        body_format: json
        body: >
          {
            "credentials": {
              "scope": "GLOBAL",
              "id": "dockerhub-cred",
              "username": "dylalva",
              "password": "{{ lookup('env', 'DOCKER_PASSWORD') }}",
              "description": "Docker Hub Credentials",
              "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
            }
          }
        status_code: [200, 302]
      ignore_errors: yes

    ##################################################################
    # 11) Crear credencial Azure Service Principal
    ##################################################################
    - name: Crear credencial Azure SP en Jenkins
      uri:
        url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: "application/json"
        body_format: json
        body: >
          {
            "credentials": {
              "scope": "GLOBAL",
              "id": "azure-service-principal",
              "subscriptionId": "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID') }}",
              "clientId": "{{ lookup('env', 'AZURE_CLIENT_ID') }}",
              "clientSecret": "{{ lookup('env', 'AZURE_CLIENT_SECRET') }}",
              "tenant": "{{ lookup('env', 'AZURE_TENANT_ID') }}",
              "description": "Azure Service Principal",
              "$class": "com.microsoft.azure.credentials.AzureServicePrincipal"
            }
          }
        status_code: [200, 302]
      ignore_errors: yes

    ##################################################################
    # 12) Limpiar archivos temporales
    ##################################################################
    - name: Limpiar archivos temporales
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/jenkins-cli.jar
        - /tmp/job-config.xml

    ##################################################################
    # 13) Mensaje final de Ã©xito
    ##################################################################
    - name: Jenkins configurado con plugins, credenciales y pipeline ðŸŽ‰
      debug:
        msg: "âœ… Jenkins ya tiene plugins, credenciales y el job '{{ job_name }}' creado."