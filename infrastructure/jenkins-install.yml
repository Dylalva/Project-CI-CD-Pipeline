---
- name: Configurar Jenkins completo en VM Azure
  hosts: jenkins_vm
  become: true
  vars:
    docker_jenkins_home: jenkins_home
    jenkins_url: http://localhost:8080
    jenkins_admin_user: admin
    jenkins_admin_password: admin_password
    job_name: ci-cd-kube
    jenkins_plugins:
      - docker-plugin
      - docker-workflow
      - azure-credentials
      - azure-cli

  tasks:
    - name: Actualizar repositorios
      apt:
        update_cache: yes

    - name: Instalar Docker y Java
      apt:
        name: ['docker.io', 'openjdk-11-jdk', 'curl', 'wget']
        state: present

    - name: Asegurar que Docker esté iniciado
      service:
        name: docker
        state: started
        enabled: yes

    - name: Esperar a que Jenkins inicialice
      wait_for:
        port: 8080
        delay: 10
        timeout: 120

    - name: Copiar script de seguridad para crear admin
      copy:
        src: basic-security.groovy
        dest: /var/lib/docker/volumes/{{ docker_jenkins_home }}/_data/init.groovy.d/basic-security.groovy

    - name: Reiniciar Jenkins para aplicar script Groovy
      docker_container:
        name: jenkins
        state: restarted

    - name: Esperar que Jenkins esté disponible tras reinicio
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10

    - name: Descargar Jenkins CLI
      get_url:
        url: "{{ jenkins_url }}/jnlpJars/jenkins-cli.jar"
        dest: /tmp/jenkins-cli.jar

    - name: Instalar plugins necesarios
      shell: >
        java -jar /tmp/jenkins-cli.jar -s {{ jenkins_url }}
        -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }}
        install-plugin {{ item }} -deploy
      loop: "{{ jenkins_plugins }}"
      args:
        executable: /bin/bash

    - name: Esperar que Jenkins esté disponible tras plugins
      uri:
        url: "{{ jenkins_url }}/login"
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 15
      delay: 10

    - name: Obtener Crumb de Jenkins
      uri:
        url: "{{ jenkins_url }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)"
        method: GET
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        return_content: yes
      register: crumb

    - name: Crear credencial Docker Hub
      uri:
        url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: application/json
          "{{ crumb.content.split(':')[0] }}": "{{ crumb.content.split(':')[1] }}"
        body_format: json
        body: >
          {
            "credentials": {
              "scope": "GLOBAL",
              "id": "dockerhub-cred",
              "username": "dylalva",
              "password": "{{ lookup('env', 'DOCKER_PASSWORD') }}",
              "description": "Docker Hub Credentials",
              "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
            }
          }

    - name: Crear credencial Azure SP
      uri:
        url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: application/json
          "{{ crumb.content.split(':')[0] }}": "{{ crumb.content.split(':')[1] }}"
        body_format: json
        body: >
          {
            "credentials": {
              "scope": "GLOBAL",
              "id": "azure-service-principal",
              "subscriptionId": "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID') }}",
              "clientId": "{{ lookup('env', 'AZURE_CLIENT_ID') }}",
              "clientSecret": "{{ lookup('env', 'AZURE_CLIENT_SECRET') }}",
              "tenant": "{{ lookup('env', 'AZURE_TENANT_ID') }}",
              "description": "Azure Service Principal",
              "$class": "com.microsoft.azure.credentials.AzureServicePrincipal"
            }
          }

    - name: Crear pipeline desde archivo XML
      uri:
        url: "{{ jenkins_url }}/createItem?name={{ job_name }}"
        method: POST
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        headers:
          Content-Type: application/xml
          "{{ crumb.content.split(':')[0] }}": "{{ crumb.content.split(':')[1] }}"
        body: "{{ lookup('file', 'infrastructure/job-config.xml') }}"
