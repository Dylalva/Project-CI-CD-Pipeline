---
- name: Configurar Jenkins en contenedor Docker existente
  hosts: jenkins_vm
  become: true

  tasks:
    - name: Instalar Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Asegurar que Docker esté iniciado y habilitado
      service:
        name: docker
        state: started
        enabled: yes

    - name: Esperar a que Jenkins esté disponible (puerto 8080)
      uri:
        url: http://localhost:8080/login
        method: GET
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10

    - name: Crear script Groovy para crear usuario admin en VM temporalmente
      copy:
        dest: /tmp/basic-security.groovy
        content: |
          import jenkins.model.*
          import hudson.security.*

          def instance = Jenkins.getInstance()

          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount("admin", "admin_password")  # Cambia la contraseña por una segura
          instance.setSecurityRealm(hudsonRealm)

          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)

          def csrf = instance.getExtensionList('hudson.security.csrf.CrumbIssuer')[0]
          csrf.setEnabled(false)
          instance.save()

    - name: Crear carpeta init.groovy.d dentro del contenedor Jenkins
      shell: docker exec jenkins mkdir -p /var/jenkins_home/init.groovy.d

    - name: Copiar script Groovy dentro del contenedor Jenkins
      shell: docker cp /tmp/basic-security.groovy jenkins:/var/jenkins_home/init.groovy.d/basic-security.groovy

    - name: Reiniciar contenedor Jenkins para aplicar configuración
      shell: docker restart jenkins

    - name: Esperar a que Jenkins esté completamente reiniciado
      uri:
        url: http://localhost:8080/login
        method: GET
        status_code: 200
      register: result_restarted
      until: result_restarted.status == 200
      retries: 30
      delay: 10
    - name: Instalar jq para procesar JSON
      apt:
        name: jq
        state: present
    - name: Verificar si el usuario admin está creado
      shell: curl -s -u admin:admin_password http://localhost:8080/api/json | jq '.user'
      register: result_user_check
      failed_when: result_user_check.rc != 0
